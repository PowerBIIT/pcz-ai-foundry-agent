// Export Dialog Component
// Sprint 3 - Professional Tools

import React, { useState } from 'react';
import { toast } from 'react-toastify';
import { exportService, ExportService, ExportOptions, ExportData } from '../../services/export/ExportService';
import { ConversationMetadata } from '../../services/ChatHistoryService';
import { ChatMessage } from '../../services/ChatService';
import { FileMetadata } from '../../types/FileTypes';

interface ExportDialogProps {
  isOpen: boolean;
  onClose: () => void;
  conversation?: ConversationMetadata;
  messages: ChatMessage[];
  attachments?: FileMetadata[];
  title?: string;
}

export const ExportDialog: React.FC<ExportDialogProps> = ({
  isOpen,
  onClose,
  conversation,
  messages,
  attachments = [],
  title = 'Export konwersacji'
}) => {
  const [selectedFormat, setSelectedFormat] = useState<ExportOptions['format']>('pdf');
  const [includeHeader, setIncludeHeader] = useState(true);
  const [includeTimestamps, setIncludeTimestamps] = useState(true);
  const [includeAttachments, setIncludeAttachments] = useState(true);
  const [isExporting, setIsExporting] = useState(false);

  const supportedFormats = ExportService.getSupportedFormats();

  // Create mock conversation if not provided
  const mockConversation: ConversationMetadata = conversation || {
    threadId: 'current',
    userId: 'current-user',
    title: title,
    lastMessage: messages[messages.length - 1]?.content || '',
    lastMessagePreview: messages[messages.length - 1]?.content.substring(0, 100) || '',
    lastActivity: new Date(),
    messageCount: messages.length,
    hasAttachments: attachments.length > 0,
    isActive: true
  };

  const exportData: ExportData = {
    conversation: mockConversation,
    messages,
    attachments,
    exportOptions: {
      format: selectedFormat,
      includeHeader,
      includeTimestamps,
      includeFileAttachments: includeAttachments,
      metadata: {
        author: 'PCZ Agent System',
        title: mockConversation.title,
        subject: 'Conversation export from PCZ Financial Assistant',
        keywords: ['PCZ', 'financial', 'conversation', 'report']
      },
      watermark: 'Generated by PCZ Agent - Politechnika Czƒôstochowska'
    }
  };

  const feasibility = exportService.checkExportFeasibility(exportData);

  const handleExport = async () => {
    if (messages.length === 0) {
      toast.warn('Brak wiadomo≈õci do eksportu');
      return;
    }

    setIsExporting(true);
    
    try {
      await exportService.exportConversation(exportData);
      toast.success(`Eksport ${selectedFormat.toUpperCase()} zosta≈Ç pomy≈õlnie wygenerowany`);
      onClose();
    } catch (error) {
      console.error('Export error:', error);
      toast.error(`B≈ÇƒÖd eksportu: ${error instanceof Error ? error.message : 'Nieznany b≈ÇƒÖd'}`);
    } finally {
      setIsExporting(false);
    }
  };

  const handleEmailExport = async () => {
    try {
      const emailData = await exportService.exportForEmail(exportData);
      
      // Create mailto link
      const mailtoLink = `mailto:?subject=${encodeURIComponent(emailData.subject)}&body=${encodeURIComponent(emailData.body)}`;
      window.open(mailtoLink);
      
      toast.info('Otworzono klienta email. Pamiƒôtaj o dodaniu za≈ÇƒÖcznika!');
      
      // Also export file for attachment
      await exportService.exportConversation(exportData);
      
    } catch (error) {
      console.error('Email export error:', error);
      toast.error('B≈ÇƒÖd przygotowania eksportu email');
    }
  };

  if (!isOpen) return null;

  return (
    <div className="export-dialog-overlay" onClick={onClose}>
      <div className="export-dialog" onClick={e => e.stopPropagation()}>
        <div className="dialog-header">
          <h3>üì§ {title}</h3>
          <button onClick={onClose} className="close-btn">‚úñ</button>
        </div>

        <div className="dialog-content">
          {/* Conversation info */}
          <div className="conversation-info">
            <h4>üìä Informacje o rozmowie:</h4>
            <div className="info-grid">
              <div className="info-item">
                <strong>Tytu≈Ç:</strong> {mockConversation.title}
              </div>
              <div className="info-item">
                <strong>Wiadomo≈õci:</strong> {messages.length}
              </div>
              <div className="info-item">
                <strong>Za≈ÇƒÖczniki:</strong> {attachments.length}
              </div>
              <div className="info-item">
                <strong>Rozmiar:</strong> {feasibility.estimatedSize}
              </div>
            </div>
          </div>

          {/* Format selection */}
          <div className="format-selection">
            <h4>üìã Format eksportu:</h4>
            <div className="format-options">
              {supportedFormats.map(format => (
                <label key={format.format} className="format-option">
                  <input
                    type="radio"
                    value={format.format}
                    checked={selectedFormat === format.format}
                    onChange={(e) => setSelectedFormat(e.target.value as ExportOptions['format'])}
                  />
                  <div className="format-card">
                    <span className="format-icon">{format.icon}</span>
                    <span className="format-name">{format.name}</span>
                    <span className="format-desc">{format.description}</span>
                  </div>
                </label>
              ))}
            </div>
          </div>

          {/* Export options */}
          <div className="export-options">
            <h4>‚öôÔ∏è Opcje eksportu:</h4>
            <div className="options-grid">
              <label className="option-item">
                <input
                  type="checkbox"
                  checked={includeHeader}
                  onChange={(e) => setIncludeHeader(e.target.checked)}
                />
                <span>Do≈ÇƒÖcz nag≈Ç√≥wek z logo PCz</span>
              </label>
              
              <label className="option-item">
                <input
                  type="checkbox"
                  checked={includeTimestamps}
                  onChange={(e) => setIncludeTimestamps(e.target.checked)}
                />
                <span>Do≈ÇƒÖcz znaczniki czasu</span>
              </label>
              
              {attachments.length > 0 && (
                <label className="option-item">
                  <input
                    type="checkbox"
                    checked={includeAttachments}
                    onChange={(e) => setIncludeAttachments(e.target.checked)}
                  />
                  <span>Do≈ÇƒÖcz informacje o za≈ÇƒÖcznikach</span>
                </label>
              )}
            </div>
          </div>

          {/* Warnings */}
          {feasibility.warnings.length > 0 && (
            <div className="export-warnings">
              <h4>‚ö†Ô∏è Ostrze≈ºenia:</h4>
              <ul>
                {feasibility.warnings.map((warning, index) => (
                  <li key={index}>{warning}</li>
                ))}
              </ul>
            </div>
          )}
        </div>

        <div className="dialog-footer">
          <div className="export-actions">
            <button
              onClick={handleExport}
              disabled={isExporting || !feasibility.canExport}
              className="export-btn primary"
            >
              {isExporting ? '‚è≥ Eksportujƒô...' : `üì§ Eksportuj ${selectedFormat.toUpperCase()}`}
            </button>
            
            <button
              onClick={handleEmailExport}
              disabled={isExporting}
              className="export-btn secondary"
            >
              üìß Wy≈õlij email
            </button>
            
            <button
              onClick={onClose}
              disabled={isExporting}
              className="export-btn cancel"
            >
              Anuluj
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ExportDialog;